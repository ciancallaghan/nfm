#!/usr/bin/env python3

import curses
import os
import subprocess
from curses import textpad


class Browser:
    def __init__(self, stdscr):
        self.stdscr = stdscr
        self.height, self.width = self.stdscr.getmaxyx()
        self.mainwin = curses.newwin(self.height - 2, self.width - 1, 0, 0)
        self.statusbar = curses.newwin(1, self.width - 1, self.height - 2, 0)
        self.offset = 0
        self.curr = 0
        # ncurses settings
        curses.noecho()
        curses.cbreak()
        curses.curs_set(False)
        curses.use_default_colors()
        curses.init_pair(1, -1, -1)
        curses.init_pair(2, curses.COLOR_RED, -1)
        # action lists
        self.to_delete = []
        # user settings
        self.show_hidden_files = False

    def draw_mainwin(self):
        # check if too many listings for screen
        if len(self.listings) >= self.height - 2:
            listings = self.listings[self.offset:self.height + self.offset]
        else:
            listings = self.listings
        # display listings
        self.mainwin.clear()
        for i, listing in enumerate(listings):
            try:
                option = curses.color_pair(1)
                if i == self.curr - self.offset and listing in self.to_delete:
                    option = curses.A_REVERSE | curses.color_pair(2)
                elif i == self.curr - self.offset:
                    option = curses.A_REVERSE
                elif os.path.isdir(listing) and listing in self.to_delete:
                    option = curses.A_BOLD | curses.color_pair(2)
                elif os.path.isdir(listing):
                    option = curses.A_BOLD
                elif listing in self.to_delete:
                    option = curses.color_pair(2)
                self.mainwin.addstr(i, 0, listing.split("/")[-1], option)
            except:
                pass
        self.mainwin.refresh()

    def draw_statusbar(self, warn_msg=""):
        option = curses.A_REVERSE
        if warn_msg:
            option = option | curses.color_pair(2)
            text = warn_msg
        else:
            text = self.curdir
            if self.show_hidden_files:
                text += " [.]"
        text += " " * (self.width - len(text) - 1)
        try:
            self.statusbar.addstr(0, 0, text, option)
        except:
            pass
        self.statusbar.refresh()
        if warn_msg:
            self.statusbar.getkey()

    def get_curdir(self):
        curdir = os.getcwd()
        curdir = os.path.expanduser(curdir)
        curdir = os.path.normpath(curdir)
        self.curdir = curdir

    def get_input(self, msg):
        messagebar = curses.newwin(1, len(msg) + 1, self.height - 1, 0)
        inputbar = curses.newwin(1, self.width - (len(msg) + 2), self.height - 1, len(msg))
        try:
            messagebar.addstr(0, 0, msg)
            messagebar.refresh()
            # TODO: Sanitize input
            return curses.textpad.Textbox(inputbar).edit()[:-1]
        except:
            pass
        finally:
            del messagebar
            del inputbar
            self.stdscr.clear()

    def get_listings(self):
        self.get_curdir()
        if self.show_hidden_files:
            dirs = [x for x in os.listdir(self.curdir) if os.path.isdir(x)]
            files = [x for x in os.listdir(self.curdir) if os.path.isfile(x)]
        else:
            dirs = [x for x in os.listdir(self.curdir) if os.path.isdir(x) and not x.startswith(".")]
            files = [x for x in os.listdir(self.curdir) if os.path.isfile(x) and not x.startswith(".")]
        dirs.sort()
        files.sort()
        self.listings = dirs + files
        self.listings = [self.curdir + "/" + x for x in self.listings]

    def keyhandler(self, key):
        if key == curses.KEY_RESIZE:
            self.resize()
        # Navigation
        elif key == ord("j"):
            if self.curr + 1 < len(self.listings):
                self.curr += 1
                if self.curr > self.height - 3 and self.offset + self.height - 2 < len(self.listings):
                    self.offset += 1
        elif key == ord("k"):
            if self.curr - 1 >= 0:
                self.curr -= 1
                if self.curr < self.offset:
                    self.offset -= 1
        elif key == ord("g"):
            self.curr = 0
            self.offset = 0
        elif key == ord("G"):
            self.curr = len(self.listings) - 1
            if self.curr > self.height - 3:
                self.offset = len(self.listings) - self.height + 2
        # Folder/File Navigation
        elif key == ord("h"):
            old = self.curdir
            os.chdir("..")
            self.get_curdir()
            self.get_listings()
            try:
                self.curr = self.listings.index(old)
                if self.curr > self.height - 3:
                    self.offset = self.curr - self.height + 3
                else:
                    self.offset = 0
            except:
                self.curr = 0
                self.offset = 0
        elif key == ord("l"):
            self.opener(self.listings[self.curr])
        elif key == ord("~"):
            os.chdir(os.path.expanduser("~"))
            self.curr = 0
            self.offset = 0
        # Actions
        elif key == ord("d"):
            if self.listings[self.curr] in self.to_delete:
                self.to_delete.remove(self.listings[self.curr])
            else:
                if os.path.isdir(self.listings[self.curr]):
                    self.to_delete.append(self.listings[self.curr])
                else:
                    self.to_delete.insert(0, self.listings[self.curr])
        elif key == ord("p"):
            self.perform_actions()
        # Toggles
        elif key == ord("."):
            self.show_hidden_files = not self.show_hidden_files
        # Others
        elif key == ord("f"):
            file_name = self.get_input("touch: ")
            if os.path.exists(file_name):
                self.draw_statusbar("File already exists.")
            else:
                try:
                    os.close(os.open(file_name, os.O_CREAT | os.O_WRONLY | os.O_NONBLOCK | os.O_NOCTTY, 0o666))
                except:
                    self.draw_statusbar("Could not create file.")
        elif key == ord("n"):
            dir_name = self.get_input("mkdir: ")
            try:
                os.makedirs(dir_name)
            except:
                self.draw_statusbar("Coud not create directory.")
        elif key == ord("r"):
            new_name = self.get_input("rename: ")
            try:
                os.rename(self.listings[self.curr], new_name)
            except:
                self.draw_statusbar("Couldn't rename file/dir.")
        elif key == ord("!"):
            curses.endwin()
            subprocess.call(os.environ["SHELL"])
            self.stdscr.refresh()
            self.stdscr.clear()
        elif key == ord("q"):
            exit()

    def opener(self, to_open):
        if os.path.isdir(to_open):
            os.chdir(to_open)
            self.curr = 0
            self.offset = 0
        else:
            curses.endwin()
            try:
                subprocess.call([os.environ["FFF_OPENER"], to_open])
            except:
                print("NFM_OPENER not set.")
            finally:
                self.stdscr.refresh()
                self.stdscr.clear()

    def perform_actions(self):
        for item in self.to_delete:
            try:
                if os.path.isdir(item):
                    os.rmdir(item)
                else:
                    os.remove(item)
            except:
                self.draw_statusbar("Could not delete file/directory")
                self.statusbar.getkey()

    def resize(self):
        self.height, self.width = self.stdscr.getmaxyx()
        self.stdscr.clear()
        # New mainwin
        del self.mainwin
        self.mainwin = curses.newwin(self.height - 3, self.width - 1, 0, 0)
        # New statusbar
        del self.statusbar
        self.statusbar = curses.newwin(2, self.width - 1, self.height - 2, 0)

    def run(self):
        self.stdscr.clear()
        while True:
            self.get_listings()
            self.stdscr.refresh()
            self.draw_mainwin()
            self.draw_statusbar()
            self.keyhandler(self.stdscr.getch())


def main(stdscr):
    browser = Browser(stdscr)
    browser.run()


curses.wrapper(main)
