#!/usr/bin/env python3

import curses
import os
import subprocess


class Browser:
    def __init__(self, stdscr):
        self.stdscr = stdscr
        self.height, self.width = self.stdscr.getmaxyx()
        self.mainwin = curses.newwin(self.height - 2, self.width - 1, 0, 0)
        self.statusbar = curses.newwin(2, self.width - 1, self.height - 2, 0)
        self.offset = 0
        self.curr = 0
        # ncurses settings
        curses.noecho()
        curses.cbreak()
        curses.curs_set(False)
        curses.use_default_colors()
        # user settings
        self.show_hidden_files = False

    def draw_mainwin(self):
        # check if too many listings for screen
        if len(self.listings) >= self.height - 2:
            listings = self.listings[self.offset:self.height + self.offset]
        else:
            listings = self.listings
        # display listings
        self.mainwin.clear()
        for i, listing in enumerate(listings):
            try:
                if i == self.curr - self.offset:
                    self.mainwin.addstr(i, 0, listing.split("/")[-1], curses.A_REVERSE)
                elif os.path.isdir(listing):
                    self.mainwin.addstr(i, 0, listing.split("/")[-1], curses.A_BOLD)
                else:
                    self.mainwin.addstr(i, 0, listing.split("/")[-1])
            except:
                pass
        self.mainwin.refresh()

    def draw_statusbar(self):
        text = self.curdir
        if self.show_hidden_files:
            text += " [.]"
        text += " " * (self.width - len(text) - 1)
        try:
            self.statusbar.addstr(0, 0, text, curses.A_REVERSE)
        except:
            pass
        self.statusbar.refresh()

    def get_curdir(self):
        curdir = os.getcwd()
        curdir = os.path.expanduser(curdir)
        curdir = os.path.normpath(curdir)
        self.curdir = curdir

    def get_listings(self):
        self.get_curdir()
        if self.show_hidden_files:
            dirs = [x for x in os.listdir(self.curdir) if os.path.isdir(x)]
            files = [x for x in os.listdir(self.curdir) if os.path.isfile(x)]
        else:
            dirs = [x for x in os.listdir(self.curdir) if os.path.isdir(x) and not x.startswith(".")]
            files = [x for x in os.listdir(self.curdir) if os.path.isfile(x) and not x.startswith(".")]
        dirs.sort()
        files.sort()
        self.listings = dirs + files
        self.listings = [self.curdir + "/" + x for x in self.listings]

    def keyhandler(self, key):
        if key == curses.KEY_RESIZE:
            self.resize()
        # Navigation
        elif key == ord("j"):
            if self.curr + 1 < len(self.listings):
                self.curr += 1
                if self.curr > self.height - 3 and self.offset + self.height - 2 < len(self.listings):
                    self.offset += 1
        elif key == ord("k"):
            if self.curr - 1 >= 0:
                self.curr -= 1
                if self.curr < self.offset:
                    self.offset -= 1
        elif key == ord("g"):
            self.curr = 0
            self.offset = 0
        elif key == ord("G"):
            self.curr = len(self.listings) - 1
            if self.curr > self.height - 3:
                self.offset = len(self.listings) - self.height + 2
        # Folder/File Navigation
        elif key == ord("h"):
            old = self.curdir
            os.chdir("..")
            self.get_curdir()
            self.get_listings()
            try:
                self.curr = self.listings.index(old)
                if self.curr > self.height - 3:
                    self.offset = self.curr - self.height + 3
                else:
                    self.offset = 0
            except:
                self.curr = 0
                self.offset = 0
        elif key == ord("l"):
            self.opener(self.listings[self.curr])
        elif key == ord("~"):
            os.chdir(os.path.expanduser("~"))
            self.curr = 0
            self.offset = 0
        # Toggles
        elif key == ord("."):
            self.show_hidden_files = not self.show_hidden_files
        # Others
        elif key == ord("!"):
            curses.endwin()
            subprocess.call(os.environ["SHELL"])
            self.stdscr.refresh()
            self.stdscr.clear()
        elif key == ord("q"):
            exit()

    def opener(self, to_open):
        if os.path.isdir(to_open):
            os.chdir(to_open)
            self.curr = 0
            self.offset = 0
        else:
            curses.endwin()
            try:
                subprocess.call([os.environ["FFF_OPENER"], to_open])
            except:
                print("NFM_OPENER not set.")
            finally:
                self.stdscr.refresh()
                self.stdscr.clear()

    def resize(self):
        self.height, self.width = self.stdscr.getmaxyx()
        self.stdscr.clear()
        # New mainwin
        del self.mainwin
        self.mainwin = curses.newwin(self.height - 3, self.width - 1, 0, 0)
        # New statusbar
        del self.statusbar
        self.statusbar = curses.newwin(2, self.width - 1, self.height - 2, 0)

    def run(self):
        self.stdscr.clear()
        while True:
            self.get_listings()
            self.stdscr.refresh()
            self.draw_mainwin()
            self.draw_statusbar()
            self.keyhandler(self.stdscr.getch())


def main(stdscr):
    browser = Browser(stdscr)
    browser.run()


curses.wrapper(main)
