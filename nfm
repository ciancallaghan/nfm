#!/usr/bin/env python3

import curses
import os
import subprocess

show_hidden = False
sort_reverse = False
sort_key = None
curr = 0
to_delete = []

def draw_listings(win, listings):
    global curr
    global to_delete

    for i, listing in enumerate(listings):
        if listing in to_delete and i == curr:
            win.addstr(i, 0, "*"+listing.split("/")[-1], curses.A_REVERSE) 
        elif i == curr:
            win.addstr(i, 0, listing.split("/")[-1], curses.A_REVERSE)
        elif listing in to_delete:
            win.addstr(i, 0, "*" + listing.split("/")[-1], curses.COLOR_RED)
        elif os.path.isdir(listing):
            win.addstr(i, 0, listing.split("/")[-1], curses.A_BOLD)
        else:
            win.addstr(i, 0, listing.split("/")[-1])

def draw_message(win, msg, wait=False):
    win.addstr(curses.LINES - 2, 0, msg, curses.A_REVERSE)
    if wait:
        win.getch()

def draw_statusbar(win, cwd):
    global show_hidden

    status_text = cwd
    if show_hidden:
        status_text += " [.]"
    if sort_key == os.path.getctime:
        status_text += " [c]"
    if sort_key == os.path.getmtime:
        status_text += " [m]"
    if sort_key == os.path.getsize:
        status_text += " [s]"
    if sort_reverse:
        status_text += " [R]"
    status_text += (" " * (curses.COLS - len(status_text)))
    win.addstr(curses.LINES - 2, 0, status_text, curses.A_REVERSE)

def delete_files(win):
    global to_delete

    for file in to_delete:
        if os.path.isfile(file):
            try:
                os.remove(file)
                to_delete.remove(file)
            except:
                draw_message(win, "File could not be deleted.", True)
        elif os.path.isdir(file):
            try:
                os.rmdir(file)
                to_delete.remove(file)
            except:
                draw_message(win, "Folder could not be deleted. Is it empty?", True)

def getcurdir():
    curdir = os.getcwd()
    curdir = os.path.expanduser(curdir)
    curdir = os.path.normpath(curdir)
    return curdir

def getlistings(cwd):
    global show_hidden
    global sort_reverse
    global sort_key

    dirs = [x for x in os.listdir(cwd) if os.path.isdir(x)]
    files = [x for x in os.listdir(cwd) if os.path.isfile(x)]

    if not show_hidden:
        dirs = [x for x in dirs if not x.startswith(".")]
        files = [x for x in files if not x.startswith(".")]

    # sorting
    dirs.sort(key=sort_key, reverse=sort_reverse)
    files.sort(key=sort_key, reverse=sort_reverse)

    # first directories then files
    listings = dirs + files
    listings = [cwd + "/" + x for x in listings]
    return listings

def key_handler(win, key, cwd, listings):
    global show_hidden
    global curr
    global sort_reverse
    global sort_key

    if key == "q":
        exit()
    # Toggles
    elif key == ".":
        show_hidden = not show_hidden
    elif key == "s":
        sort_msg = "n:name"
        sort_msg += "  N:name,reversed"
        sort_msg += "  c:ctime"
        sort_msg += "  C:ctime,reversed"
        sort_msg += "  m:mtime"
        sort_msg += "  M:mtime,reversed"
        sort_msg += "  s:size"
        sort_msg += "  S:size,reversed"
        draw_message(win, sort_msg)
        key = win.getkey()
        if key == "n":
            sort_reverse = False
            sort_key = None
        elif key == "N":
            sort_reverse = True
            sort_key = None
        elif key == "c":
            sort_reverse = False
            sort_key = os.path.getctime
        elif key == "C":
            sort_reverse = True
            sort_key = os.path.getctime
        elif key == "m":
            sort_reverse = False
            sort_key = os.path.getmtime
        elif key == "M":
            sort_reverse = True
            sort_key = os.path.getmtime
        elif key == "s":
            sort_reverse = False
            sort_key = os.path.getsize
        elif key == "S":
            sort_reverse = True
            sort_key = os.path.getsize
    # Movement
    elif key == "j" and curr+1 < len(listings):
        curr += 1
    elif key == "k" and curr-1 > -1:
        curr -= 1
    elif key == "g":
        curr = 0
    elif key == "G":
        curr = len(listings) - 1
    # Traversing directories/files
    elif key == "h":
        os.chdir("..")
        curr = 0
    elif key == "l":
        new = listings[curr]
        opener(win, new)
    elif key == "~":
        os.chdir(os.path.expanduser("~"))
        curr = 0
    # File actions
    elif key == "d":
        if listings[curr] in to_delete:
            to_delete.remove(listings[curr])
        else:
            to_delete.append(listings[curr])
    elif key == "p":
        delete_files(win)
        win.clear()
    # Others
    elif key == "!":
        os.environ["PS1"] = "[!]"
        curses.endwin()
        subprocess.call(os.environ["SHELL"])
        win.refresh()
        win.clear()

def opener(win, new):
    global curr

    if os.path.isdir(new):
        os.chdir(new)
        curr = 0
    else:
        curses.endwin()
        try:
            subprocess.call([os.environ["NFM_OPENER"], new])
        except:
            subprocess.call(["xdg-open", new])
        finally:
            win.refresh()
            win.clear()

def nfm(win = curses.initscr()):
    # ncurses settings
    curses.noecho()
    curses.cbreak()
    curses.curs_set(False)
    curses.use_default_colors()

    # main file-manager loop
    while True:
        cwd = getcurdir()
        win.clear()
        listings = getlistings(cwd)
        draw_listings(win, listings)
        draw_statusbar(win, cwd)
        key_handler(win, win.getkey(), cwd, listings)

curses.wrapper(nfm)
